import numpy as np
import matplotlib.pyplot as plt
import cv2
import imageio
import pandas as pd
from skimage.filters import threshold_otsu, gaussian
from skimage.morphology import remove_small_objects, binary_closing, disk

def load_images(paths):
    images = [imageio.imread(path) for path in paths]
    return images

def enhance_contrast(image):
    clahe = cv2.createCLAHE(clipLimit=5.0, tileGridSize=(8, 8))
    enhanced_image = clahe.apply(image)
    return enhanced_image

def adjust_threshold(image, threshold_scale):
    otsu_thresh = threshold_otsu(image)
    adjusted_thresh = otsu_thresh * threshold_scale
    binary_image = image < adjusted_thresh  # Invert the binary mask
    return binary_image

def apply_mask(original_image, binary_mask):
    masked_image = np.where(binary_mask, 0, original_image)  # Set mask area to 0 (black), keep other areas unchanged
    return masked_image

def manual_select_keypoints(images, titles=["Reference Image", "Moving Image"]):
    keypoints = [[], []]

    def select_point(event, x, y, flags, param):
        img_index = param["img_index"]
        if event == cv2.EVENT_LBUTTONDOWN:
            keypoints[img_index].append((x, y))
            cv2.circle(images[img_index], (x, y), 5, (0, 255, 0), -1)
            cv2.imshow(titles[img_index], images[img_index])
    
    for i, img in enumerate(images):
        cv2.imshow(titles[i], img)
        cv2.setMouseCallback(titles[i], select_point, param={"img_index": i})
    
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    return keypoints[0], keypoints[1]

def compute_distances(keypoints1, keypoints2):
    distances = []
    for (x1, y1), (x2, y2) in zip(keypoints1, keypoints2):
        dist = np.sqrt((x1 - x2)**2 + (y1 - y2)**2)
        distances.append(dist)
    return distances

def save_to_excel(keypoints1, keypoints2, distances, output_path):
    data = []
    for i, ((x1, y1), (x2, y2), dist) in enumerate(zip(keypoints1, keypoints2, distances)):
        data.append({
            "Match Index": i + 1,
            "Reference X": x1,
            "Reference Y": y1,
            "Moving X": x2,
            "Moving Y": y2,
            "Distance": dist
        })
    
    df = pd.DataFrame(data)
    df.to_excel(output_path, index=False)

def main(image_paths):
    output_dir = 'C:\\Users\\austa\\Downloads\\0.4'
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    images = load_images(image_paths)
    reference_image = cv2.convertScaleAbs(images[0])
    moving_image = cv2.convertScaleAbs(images[1])

    # Apply Gaussian blur and threshold to create binary masks for both images
    blurred_reference = gaussian(reference_image, sigma=2)
    blurred_moving = gaussian(moving_image, sigma=2)

    threshold_scale = 1.3  # Increase threshold by 30%

    adjusted_binary_ref = adjust_threshold(blurred_reference, threshold_scale)
    adjusted_binary_ref = remove_small_objects(adjusted_binary_ref, min_size=1000)
    adjusted_binary_ref = binary_closing(adjusted_binary_ref, selem=disk(5))

    adjusted_binary_mov = adjust_threshold(blurred_moving, threshold_scale)
    adjusted_binary_mov = remove_small_objects(adjusted_binary_mov, min_size=1000)
    adjusted_binary_mov = binary_closing(adjusted_binary_mov, selem=disk(5))

    # Mask the reference and moving images
    masked_reference_image = apply_mask(reference_image, adjusted_binary_ref.copy())
    masked_moving_image = apply_mask(moving_image, adjusted_binary_mov.copy())

    # Enhance contrast
    enhanced_reference_image = enhance_contrast(masked_reference_image)
    enhanced_moving_image = enhance_contrast(masked_moving_image)

    # Manual selection of keypoints
    ref_image_for_selection = cv2.cvtColor(reference_image, cv2.COLOR_GRAY2BGR)
    mov_image_for_selection = cv2.cvtColor(moving_image, cv2.COLOR_GRAY2BGR)

    print("Select keypoints on the reference and moving images")
    keypoints_ref, keypoints_mov = manual_select_keypoints([ref_image_for_selection.copy(), mov_image_for_selection.copy()], titles=["Reference Image", "Moving Image"])

    # Ensure the number of selected keypoints matches
    if len(keypoints_ref) != len(keypoints_mov):
        print("Error: The number of keypoints selected on both images must be the same.")
        return

    # Compute distances between matched keypoints
    distances = compute_distances(keypoints_ref, keypoints_mov)
    
    # Save matched points and distances to Excel
    excel_output_path = os.path.join(output_dir, 'matched_points_and_distances_manual.xlsx')
    save_to_excel(keypoints_ref, keypoints_mov, distances, excel_output_path)
    print(f"Matched points and distances saved to {excel_output_path}")

    # Draw matched keypoints on images
    for (x1, y1), (x2, y2) in zip(keypoints_ref, keypoints_mov):
        cv2.circle(ref_image_for_selection, (x1, y1), 5, (0, 255, 0), -1)
        cv2.circle(mov_image_for_selection, (x2, y2), 5, (0, 255, 0), -1)

    # Save images with keypoints
    imageio.imwrite(os.path.join(output_dir, 'reference_image_with_manual_kp.tif'), ref_image_for_selection)
    imageio.imwrite(os.path.join(output_dir, 'moving_image_with_manual_kp.tif'), mov_image_for_selection)

    print("Images with manually selected keypoints saved.")

    # Display images with keypoints
    fig, axs = plt.subplots(1, 2, figsize=(10, 5))
    axs[0].imshow(cv2.cvtColor(ref_image_for_selection, cv2.COLOR_BGR2RGB))
    axs[0].set_title('Reference Image with Keypoints')
    axs[1].imshow(cv2.cvtColor(mov_image_for_selection, cv2.COLOR_BGR2RGB))
    axs[1].set_title('Moving Image with Keypoints')
    plt.show()

if __name__ == "__main__":
    image_paths = [
        'C:\\Users\\austa\\Downloads\\eighth_0.4\\Day 0 + 88bit.tif',
        'C:\\Users\\austa\\Downloads\\eighth_0.4\\Day 4 + 88bit.tif'
    ]
    main(image_paths)
